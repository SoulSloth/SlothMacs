#+title SlothMacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
* Summery
This configuraiton is my ongoing effort to improve my tooling.
* Basic UI Configuration
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; no startup message
        (scroll-bar-mode -1) ; Disable scroll bar
        (tool-bar-mode -1) ; Disable tool bar
        (tooltip-mode -1) ; Disable tool tips
        (menu-bar-mode -1) ; Disable the menu bar

    ;; line Numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)

        ;; Don't show line numbers in org mode term or eshell
        (dolist (mode '(org-mode-hook
                        term-mode-hook
                        shell-mode-hook
                        eshell-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))

      ; Left and right fringes
        (set-fringe-mode 10) 
#+end_src


** Font Configuration
#+begin_src emacs-lisp
  (defvar sloth/default-font-size 140)
  
  (set-face-attribute 'default nil :font "Source code pro" :family "sans" :height 100 :width 'normal)
  (set-face-attribute 'default nil :font "Nimbus Mono PS" :family "monospace" :height 115)
#+end_src

* Package
Package.el and use-pacakge installation + configuration
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  ;; Package Sources
  (setq package-archives '(("org" .  "http://orgmode.org/elpa/")
                           ("elpa" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Bootstrap use-pacakge if it's not installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  ;; Ensure our packages are installed before we run
  (setq use-package-always-ensure t)
#+end_src

* General
Install general.el for keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  :config
  (general-create-definer sloth/leader-keys
    :keymaps '(normal insert visual emacs)
    ;; EVIL spacemacs goodness
    :prefix "SPC"
    :global-prefix "C-SPC"))
#+end_src

** Leader-keys
#+begin_src emacs-lisp
(sloth/leader-keys
 "t" '(:ignore t :which-key "toggles")
 "tt" '(counsel-load-theme :which-key "choose theme"))
#+end_src

* Completion
Completion packages
** Swiper
#+begin_src emacs-lisp
(unless (package-installed-p 'swiper)
  (package-install 'swiper))

(require 'swiper)
#+end_src

** Counsel
#+begin_src emacs-lisp
  (unless (package-installed-p 'counsel)
    (package-install 'counsel))

  (require 'counsel)

  (use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))
#+end_src

*** TODO Do we still need `require` if we're using-package?
** Ivy
*** Main Ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-k" . ivy-next-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

*** Ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

** which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.3))
#+end_src

** Hydra
#+begin_src emacs-lisp
(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(sloth/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Projectile
Projectile project management faculties
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; This lets us rapidly switch between different projects in our
    ;; work directory
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-swith-project-action #'projectile-dired))

;; Play nice with Counsel
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit
Magit for lovely facade over git's command line interface
#+begin_src emacs-lisp
  (use-package magit
    :custom
  ;; Just show the magit window in the same buffer
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Helpful
Helpful provides more helpful help messages
#+begin_src emacs-lisp
(use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Modeline
Currently just DOOM at the moment.

Ensure you run `M-x all-the-icons-install-fonts` for this to work
#+begin_src emacs-lisp
 (use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 10)))
#+end_src

* Evil, Vim keybindings for emacs
** Evil proper
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    ;; evil-collections required sets
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; Give us back up from emacs
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    ;; Exit to evil normal state with C-g instead of having to hit esc
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

;; Use visual line motions even outside of visual-line-mode buffers
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
;;
(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal)
#+end_src

** Evil collection
Evil collections provides extra evil faculties in missing areas
#+begin_src emacs-lisp
(use-package evil-collection
  ;; Only load after evil
  :after evil
  ;; init
  :config
  (evil-collection-init))
#+end_src

* Theme
I'm not married to monokai, but I like it for what it is
#+begin_src emacs-lisp
(use-package monokai-theme)
(load-theme 'monokai t)
#+end_src

* Org Mode
** Org Proper
Having the `org-ellipsis key be üéà started as a joke, but I found it pretty useful so I'm keeping it
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  ;; Indent according to outline structure
  (org-indent-mode)
  (variable-pitch-mode 1)
  ;; Word Wrap
  (visual-line-mode 1)
  (linum-mode 0))

(use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("‚óâ" "‚óã" "‚óè" "‚óã" "‚óè" "‚óã" "‚óè")))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢")))))))

(use-package org
:hook (org-mode . efs/org-mode-setup)
	   :config (setq org-ellipsis " üéà"
			 ;; hides formatting markers
			 org-hide-emphasis-markers t)
	   (efs/org-font-setup))
#+end_src

** Tags
#+begin_src emacs-lisp
(setq org-tag-alist
      '((:startgroup)
	;; Mutually exclusive tags go here
	(:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("planning" . ?p)))
#+end_src

** Refile
#+begin_src emacs-lisp
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))
  
  (advice-add 'org-refile :after `org-save-all-org-buffers)
#+end_src

*** TODO Setup some more sensible targets for refile

** Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
	 ;; Active states
	 "TODO(t)" "NEXT(n)"
	 "|"
	 ;; Done state
	 "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
#+end_src

** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/dump/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/dump/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/dump/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/dump/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/dump/metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
  (lambda () (interactive) (org-capture nil "jj")))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    ;; Fold log entries into drawer
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/.emacs.provingGrounds/orgfiles/tasks.org"
                             "~/.emacs.provingGrounds/orgfiles/birthdays.org"
                             "~/.emacs.provingGrounds/orgfiles/habits.org"
                             )) 

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
  
  
#+end_src

***  Agenda Custom Commands
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.provingGrounds/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))) 

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-Babel Config
*** Load Languages
 #+begin_src emacs-lisp
       (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t)
           (clojure . t)))

         (setq org-confirm-babel-evaluate nil)
 #+end_src

*** Backends
Just Cider for now
#+begin_src emacs-lisp
(setq org-babel-clojure-backend 'cider)
#+end_src


*** Structure Templates
#+begin_src  emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
  (add-to-list 'org-structure-template-alist '("yl" . "src yaml"))
#+end_src

** Visual Fill
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 125
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

* General Programming Utils
** Rainbow delimiters
#+begin_src emacs-lisp
  ;; Rainbow delimiters
  (use-package  rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Clojure
Currently working off of [[https://ccann.github.io/2015/10/18/cider.html][Clojure At Sea's configuraiton example]]
** Clojure mode
#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
  (add-hook 'clojure-mode-hook #'yas-minor-mode)         
  (add-hook 'clojure-mode-hook #'linum-mode)             
  (add-hook 'clojure-mode-hook #'subword-mode)           
  (add-hook 'clojure-mode-hook #'smartparens-mode)       
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook #'eldoc-mode)             
  (add-hook 'clojure-mode-hook #'idle-highlight-mode)) 
#+end_src

** Cider clojure emacs tooling
#+begin_src emacs-lisp
(use-package cider
  :ensure t
  :defer t
  :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
  :diminish subword-mode
  :config
  (setq nrepl-log-messages t                  
        cider-repl-display-in-current-window t
        cider-repl-use-clojure-font-lock t    
        cider-prompt-save-file-on-load 'always-save
        cider-font-lock-dynamically '(macro core function var)
        nrepl-hide-special-buffers t            
        cider-overlays-use-font-lock t)         
  (cider-repl-toggle-pretty-printing))
#+end_src

*** Errors
error in process filter: run-hooks: Symbol‚Äôs function definition is void: clj-refactor-mode
error in process filter: Symbol‚Äôs function definition is void: clj-refactor-mode

* Applications
** TODO Some App
[[https://github.com/daviwil/emacs-from-scratch/blob/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1/Emacs.org#applications][Do a small app.conf file]] IDK for now when this will come in handy(maybe adding rss links to newsboat?)



