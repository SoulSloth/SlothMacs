#+title: SlothMacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

This configuraiton is my ongoing effort to improve my tooling.

* Basic UI Configuration
Basic UI Setup for most of our environment
** Disable The Defaults
These optoins steal my precious screen space
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; no startup message
        (scroll-bar-mode -1) ; Disable scroll bar
        (tool-bar-mode -1) ; Disable tool bar
        (tooltip-mode -1) ; Disable tool tips
        (menu-bar-mode -1) ; Disable the menu bar
#+end_src

** Column and Line Numbers
Display Column number in the mode line and line numbers by default
#+begin_src emacs-lisp
  ;; Display column number in Mode line
  (column-number-mode)
  ;; Display line numbers by default
  (global-display-line-numbers-mode t)
#+end_src

*** Disable line numbers in certain modes

Disable line numbers when we're in these modes were it isn't as relevent
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook
                  dired-mode-hook
                  ))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:

** Fringes
Left and right display fringes
#+begin_src emacs-lisp
;; Sets the size of left and right fringes
  (set-fringe-mode 10)
#+end_src

** Fix The Bottom Gap In DWM
Resizes the window based on pixel size instead of font size

Otherwise we get a nasty gap at the bottom of our window
#+begin_src emacs-lisp
  ;; Fix gap in tiling window environments
  (setq frame-resize-pixelwise t)
#+end_src

** Font Configuration
Current font configuration.
#+begin_src emacs-lisp
;; Fonts
  (defvar sloth/default-font-size 140)

    (set-face-attribute 'default nil :font "Source code pro" :family "sans" :height 100 :width 'normal)
    (set-face-attribute 'default nil :font "Nimbus Mono PS" :family "monospace" :height 115)
#+end_src

*** TODO Complete Font Setup
**** TODO Research how font families work

**** TODO Gather a collection of good fonts

**** TODO Create a font config and tangle it to our local dotfile

* Package
Package.el and use-pacakge installation + configuration

** Require =Package=

Requires the =package.el= file that'll help us install things from various pacakge archives like =elpa=, =melpa=, and the org =elpa=
#+begin_src emacs-lisp
;; Requires package.el so we can get our packages 
  (require 'package)
#+end_src

** Package Sources
Set the =package-archives= variable up with =org=, =elpa=, and the =melpa= package archives
#+begin_src emacs-lisp
;; Elisp package repositories
  (setq package-archives '(("org" .  "http://orgmode.org/elpa/") ;; Org mode latest
                             ("elpa" . "http://elpa.gnu.org/packages/") ;; Standard elisp packages
                             ("melpa" . "https://melpa.org/packages/"))) ;;Milkypostman's Emacs Lisp Pacakge Archive
#+end_src

** Initialize Packages
Loads and activates our installed elisp packages
#+begin_src emacs-lisp
    ;; Load and activate emacs lisp packages
      (package-initialize)
#+end_src

** Refresh Package contents
=package-archive-contents= is a variable that contains the cache of all archives versions described in =package-archives= (see above in [[*Package Sources][Package Sources]]). If it's value is =nil= we call =pacakge-refresh-contents= in order to grab a fresh copy of the latest archive listings.

Useful for avoiding cases were 
#+begin_src emacs-lisp
  ;; Refresh package contents
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Require =Use-Package=

[[https://github.com/jwiegley/use-package][use-package]] is a macro that allows us to do many boiler-plate things like config packages after they're loaded, adding hooks to when our package does things, and activating package modes when opening certain files.
#+begin_src emacs-lisp
  ;; Bootstrap use-pacakge if it's not installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Require the use-package package
  (require 'use-package)

  ;; makes =:ensure t= the default for our =use-package= calls.
  (setq use-package-always-ensure t)
#+end_src

*** TODO Document various key maps that can be use with =use-package=. Link to examples in this config 
* No littering
Put temporary and backup files into =/etc= instead
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

* General
=general.el= provides analgous macros to =use-package= in the key mapping space
** use-package general
Our installation of general.el proper
#+begin_src emacs-lisp
  (use-package general
  ;; Creates qeuivalent vim mapping functions
    :config
    (general-evil-setup t)
    ;; Add our leader keys
    :config
    (general-create-definer sloth/leader-keys
      :keymaps '(normal insert visual emacs)
      ;; EVIL spacemacs goodness
      :prefix "SPC"
      :global-prefix "C-SPC"))
#+end_src

** Leader-keys
We define our leader-keys that will be passed to =general-create-definer=

Unsure as to why, but we get an error on start-up that leader-keys are not defined if we put this definition BEFORE the =use-package= def of =general=. 
#+begin_src emacs-lisp
    (sloth/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")
     "f" '(counsel-projectile-grep :which-key "projectile-grep")
     ;; Clojure CIDER commands
     "s" '(:ignore s :which-key "cider")
     "sj" '(cider-jack-in :which-key "CIDER jack-in")
     "sq" '(cider-quit :which-key "CIDER quit")
     "se" '(cider-eval-region :which-key "cider eval region")
     "ss" '(cider-insert-region-in-repl :which-key "cider send region to repl")
     "sf" '(cider-format-buffer :which-key "cider format buffer")

  ;; (defun spacemacs//cider-eval-in-repl-no-focus (form)
  ;;   "Insert FORM in the REPL buffer and eval it."
  ;;   (while (string-match "\\`[ \t\n\r]+\\|[ \t\n\r]+\\'" form)
  ;;     (setq form (replace-match "" t t form)))
  ;;   (with-current-buffer (cider-current-connection)
  ;;     (let ((pt-max (point-max)))
  ;;       (goto-char pt-max)
  ;;       (insert form)
  ;;       (indent-region pt-max (point))
  ;;       (cider-repl-return)
  ;;       (with-selected-window (get-buffer-window (cider-current-connection))
  ;;         (goto-char (point-max))))))


      )
#+end_src

#+RESULTS:

* Swiper
Swiper allows us to quickly search files for regex candidates
#+begin_src emacs-lisp
(unless (package-installed-p 'swiper)
  (package-install 'swiper))

(require 'swiper)
#+end_src

* Completion
Various completion packages which work together(sometimes).
** Ivy
Ivy provides better mini buffer completions for packages like =swiper= and =counsel=
*** Main Ivy
The main Ivy package
#+begin_src emacs-lisp
;; Ivy for better minibuffer completions
  (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-k" . ivy-next-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
#+end_src

*** Ivy-rich
=Ivy-rich= gives us some nice metadata along with the competion
#+begin_src emacs-lisp
;; Give us some more info in completions
  (use-package ivy-rich
      :init
      (ivy-rich-mode 1))
#+end_src

** Counsel
=Counsel= takes many emacs commands and fronts them to ivy ones like switching buffer, finding files, and seeing buffer history. Also works with =projectile= for my personal favorite command =counsel-projectile-grep=.
#+begin_src emacs-lisp
  ;; (unless (package-installed-p 'counsel)
  ;;     (package-install 'counsel))

  ;; (require 'counsel)

    ;; use counsel and bind some useful keys for switching buffers and finding files
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src


*** TODO Do we still need `require` if we're using-package?
** which-key

=which-key= gives us a pop-up window that will tell us the competions for any partial commands we have entered 
#+begin_src emacs-lisp
;; which-key for when we forget command completions
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src

** Hydra
=Hydra= provides us with a nice minor mode that will allow us to repeat certain families of commads over and over again like zooming in and out
#+begin_src emacs-lisp
;; Get Hydra
  (use-package hydra)

  ;; Defining a hydra meny
    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out")
      ("f" nil "finished" :exit t))

  ;; Add it to our leader-keys
    (sloth/leader-keys
      "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Projectile
Projectile project management faculties
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; This lets us rapidly switch between different projects in our
    ;; work directory
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-swith-project-action #'projectile-dired))

;; Play nice with Counsel
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Magit
Magit for a lovely facade over git's command line interface
#+begin_src emacs-lisp
  (use-package magit
    :custom
  ;; Just show the magit window in the same buffer
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Helpful
Helpful provides more helpful help messages
#+begin_src emacs-lisp
(use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* DOOM Modeline
Currently just DOOM at the moment.

Ensure you run  =M-x all-the-icons-install-fonts= for this to work
#+begin_src emacs-lisp
 (use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 10)))
#+end_src

* Evil, Vim keybindings for emacs
Gives us a vi layer over emacs.
** Evil proper
#+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init
      ;; evil-collections required sets
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      ;; Give us back up from emacs
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      ;; Exit to evil normal state with C-g instead of having to hit esc
      :config
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  ;; Set the state when we enter certain modes
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
#+end_src

** Evil collection
Evil collections provides extra evil faculties in missing areas
#+begin_src emacs-lisp
(use-package evil-collection
  ;; Only load after evil
  :after evil
  ;; init
  :config
  (evil-collection-init))
#+end_src

* Theme
Themes tried:
- monokai: pretty, but code blocks in org blended a bit too much with the background and the code highlighting didn't look right.
- gruvbox: Liking this so far, code highlighting stands out nicely on the dark background
  
#+begin_src emacs-lisp
(use-package gruvbox-theme)
(load-theme 'gruvbox t)
#+end_src

* Commenting

Using evil-nerd-commenter since the default emacs package has some weird behavoir at times
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

* Languages

[[https://emacs-lsp.github.io/lsp-mode/][Emacs LSP Mode Site]]: For all your language finding needs
=C-c l=

** Language Server Protocol

#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
#+end_src

*** LSP UI

Sideline IDE editor items
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src

*** TODO LSP Ivy
This is currently borked(at least on python language server.

Might just jump to helm instead
#+begin_src emacs-lisp :tangle no
    (use-package lsp-ivy)
#+end_src

** Company Mode

Using company mode to enable a selection box on tab completions
#+begin_src emacs-lisp
  (use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)) 

  (use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** Typescript

- Install with =npm i -g typescript-language-server=
- Also Typescript if it's not present =npm i -g typescript=
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'" ;; Start up any time we open a fiel with .ts exentsion
    :hook (typescript-mode . lsp-deferred) ;; Don't startup the server until buffer is visible
    :config (setq typescript-indent-level 2))
#+end_src

** Python

- Install with =pip install 'python-lsp-server[all]'=
- [[https://github.com/python-lsp/python-lsp-server][Project github]]
- Ensure =python= is on PATH!

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python"))
#+end_src

*** Useful keystrokes
- =run-python= : run a python shell in =*Python*=
- =python-shell-send-region= : Sends a python expression to the =*Python*= buffer
** Java

[[https://github.com/emacs-lsp/lsp-java][Github page for lsp-java]]

#+begin_src emacs-lisp
(use-package lsp-java
  :ensure t
  :hook (java-mode . lsp-deferred))
#+end_src

** Clojure
Currently working off of [[https://ccann.github.io/2015/10/18/cider.html][Clojure At Sea's configuraiton example]]
*** Clojure mode
#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
  (add-hook 'clojure-mode-hook #'yas-minor-mode)         
  (add-hook 'clojure-mode-hook #'linum-mode)             
  (add-hook 'clojure-mode-hook #'subword-mode)           
  (add-hook 'clojure-mode-hook #'smartparens-mode)       
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook #'eldoc-mode)             
  (add-hook 'clojure-mode-hook #'idle-highlight-mode)) 
#+end_src

*** Cider clojure emacs tooling
#+begin_src emacs-lisp
  (use-package cider
    :ensure t
    :defer t
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t)
    ;; I don't type things into the repl much
    (setq cider-repl-pop-to-buffer-on-connect nil)
    (setq cider-repl-display-help-banner nil)
    (cider-repl-toggle-pretty-printing))
#+end_src

#+RESULTS:
: t

**** Errors
error in process filter: run-hooks: Symbol’s function definition is void: clj-refactor-mode
error in process filter: Symbol’s function definition is void: clj-refactor-mode

* General Programming Utils
** Rainbow delimiters
Pretty rainbow delimiters to help balence parens
#+begin_src emacs-lisp
  ;; Rainbow delimiters
  (use-package  rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org Mode
I use =org-mode= to take notes, write blogs, and create litearte coding "books" with =org-babel=
** Org Proper
Having the `org-ellipsis key be 🎈 started as a joke, but I found it pretty useful so I'm keeping it
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  ;; Indent according to outline structure
  (org-indent-mode)
  (variable-pitch-mode 1)
  ;; Word Wrap
  (visual-line-mode 1)
  (linum-mode 0))

(use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1)
							  "•")))))))


(use-package org
:hook (org-mode . efs/org-mode-setup)
           :config (setq org-ellipsis " 🎈"
                         ;; hides formatting markers
                         org-hide-emphasis-markers t)
	       ;; Don't auto-indent when we RET after a line
           (setq org-edit-src-content-indentation 0)
	       (setq org-export-with-toc nil)
           (efs/org-font-setup))
#+end_src

#+RESULTS:
| efs/org-mode-visual-fill | org-tempo-setup | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | efs/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) |

** Org Face Configuration
[[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][taken from zzamboni]]

#+begin_src emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src

** Tags
#+begin_src emacs-lisp
(setq org-tag-alist
      '((:startgroup)
	;; Mutually exclusive tags go here
	(:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("planning" . ?p)))
#+end_src

** Refile Targets
#+begin_src emacs-lisp
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))
  
  (advice-add 'org-refile :after `org-save-all-org-buffers)
#+end_src

*** TODO Setup some more sensible targets for refile

** Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
	 ;; Active states
	 "TODO(t)" "NEXT(n)"
	 "|"
	 ;; Done state
	 "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
#+end_src

** Capture Templates
#+begin_src emacs-lisp
(setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/dump/tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/dump/journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/dump/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/dump/journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/dump/metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)

      ("k" "Kata Capture")
      ("kk" "Daily Kata" entry
       (file+olp+datetree "~/org/kata.org")
        "\n* %<%I:%M %p> - Kata :kata:\n\n%?\n\n"
        :clock-in :clock-resume
        :empty-lines 1)
      
      ("i" "Improvement Ideas")
      ("ii" "Tooling Improvement" entry (file+olp "~/org/improvement.org" "Tooling")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ))

(define-key global-map (kbd "C-c k")
(lambda () (interactive) (org-capture nil "kk")))

(define-key global-map (kbd "C-c t")
(lambda () (interactive) (org-capture nil "ii")))

(define-key global-map (kbd "C-c j")
(lambda () (interactive) (org-capture nil "jj")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (org-capture nil jj) |

** Org Agenda
#+begin_src emacs-lisp
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    ;; Fold log entries into drawer
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/.emacs.provingGrounds/orgfiles/tasks.org"
                             "~/.emacs.provingGrounds/orgfiles/birthdays.org"
                             "~/.emacs.provingGrounds/orgfiles/habits.org"
                             )) 

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
  
  
#+end_src

***  Agenda Custom Commands
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.provingGrounds/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))) 

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-Babel Config
*** Load Languages
 #+begin_src emacs-lisp
         (org-babel-do-load-languages
           'org-babel-load-languages
           '((emacs-lisp . t)
             (python . t)
             (clojure . t)
             (shell . t)))

           (setq org-confirm-babel-evaluate nil)
 #+end_src

 #+RESULTS:

*** Backends
Just Cider for now
#+begin_src emacs-lisp
(setq org-babel-clojure-backend 'cider)
#+end_src

*** Structure Templates
#+begin_src  emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
  (add-to-list 'org-structure-template-alist '("yl" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
#+end_src

** Visual Fill
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 125
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
	     :ensure t
	     :init
	     (setq org-roam-v2-ack t)
	     :custom
	     (org-roam-directory "~/org/roam")
	     :bind (("C-c n l" . org-roam-buffer-toggle)
	     ("C-c n f" . org-roam-node-find)
	     ("C-c n i" . org-roam-node-insert)
	     :map org-mode-map
	     ("C-M-i" . completion-at-point))
	     :config
	     (org-roam-setup))
#+end_src

#+RESULTS:
: completion-at-point

* Terminals
** term-mode
=C-c C-k= char mode
#+begin_src emacs-lisp
  (use-package term
  :config
  (setq explicit-shell-file-name "zsh")
  (setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm#requirements][vterm has a few requirements that need to be installed for it to build properly]]

#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+end_src

* File Management
** Dired
Dired for managing our filesystem.
*** Dired Proper
Dired, the Directory Editor, allows us to quickly navigate our filesystem, make edits, and perform other useful actions like compressing archives.
#+begin_src emacs-lisp
(use-package dired
;; dired is part of emacs proper so no need to ensure
  :ensure nil
  :commands (dired dired-jump)
  ;; Jump out of visited file
  :bind (("C-x C-j" . dired-jump))
  ;; `ls` options passed to dir
  :custom (
	   (dired-listing-switches "-agho --group-directories-first")
	   )
  :config
  ;; navigate our dired buffers as if we were using lf
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  ;; When on mac, tell dired to use gls
  (when (string= system-type "darwin")
  (setq dired-use-ls-dired t
        insert-directory-program "gls")))

#+end_src

*** dired-single
Allows us to have one dired buffer instead of a new one for each directory
#+begin_src emacs-lisp
  (use-package dired-single)
#+end_src

*** all-the-icons-dired
Give us a bunch of pretty icons for our dired buffer
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** dired-open
Use specific programs to open certain files
#+begin_src emacs-lisp
  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))
#+end_src

*** dired-hide-dotfiles
Hide dotfiles, which are usually clutter unless we're configuring something.
#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

* Applications
**  Example Configuration
CLOSED: [2022-05-19 Thu 20:41]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-19 Thu 20:41]
:END:
Easy way to configure dotfiles, need to find a good test case, maybe adding rss links to newsboat?

Add =:noweb yes=

#+NAME: the-value
#+begin_src emacs-lisp :tangle no
155
#+end_src
#+begin_src conf :tangle .config/some-app/config :noweb yes 
Ourvalue = <<the-value>>
#+end_src
